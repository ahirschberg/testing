#include <stdio.h>
#include <string.h>

int main(int argc, char *argv[])
{
    if(argc != 2) {
        printf("ERROR: You need one argument.\n");
        // this is how you abort a program
        return 1;
    }

    int i;
    int lowercase_offset = 'a' - 'A';
    
    /* Eventually figure out why this doesn't work */
    // int arg1_length = sizeof(argv[1]) / sizeof(char);

    char lowered_arg[ strlen(argv[1]) ];// = {'\0'};
    char letter; 
    for (i = 0; letter = argv[1][i], letter != '\0'; ++i) {

        switch(letter) {
            case 'a':
            case 'A':
                printf("%d: 'A'\n", i);
                break;
            case 'e':
            case 'E':
                printf("%d: 'E'\n", i);
            case 'i':
            case 'I':
                printf("%d: 'I'\n", i);
                break;
            case 'o':
            case 'O':
                printf("%d: 'O'\n", i);
                break;
            case 'u':
            case 'U':
                printf("%d: 'U'\n", i);
                break;
            case 'y':
            case 'Y':
                if(i > 2) {
                    // it's only sometimes Y
                    printf("%d: 'Y'\n", i);
                }
                break;

            default:
                printf("%d: %c is not a vowel\n", i, letter);
        }

        //printf("letter %c has int %i\n", letter, letter);

        // switch letters to lower case
        char lower_letter = letter;
        if(letter < 'a') {
            lower_letter += lowercase_offset;
        }
        lowered_arg[i] = lower_letter;
    }
    lowered_arg[strlen(argv[1])] = '\0'; // valgrind doesn't catch this when lowered_arg is made too small (or any assigns out of bounds for that matter)
    printf("Lowercase argument: %s\n", lowered_arg);

    return 0;
}
